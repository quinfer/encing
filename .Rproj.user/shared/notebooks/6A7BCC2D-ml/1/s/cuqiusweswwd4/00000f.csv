"0","import numpy as np"
"0","import pandas as pd"
"0",""
"0","# Generate fake daily prices"
"0","np.random.seed(0)"
"0","fake_prices = np.random.normal(100, 1, 100)"
"0",""
"0","# Convert to DataFrame"
"0","price_data = pd.DataFrame(fake_prices, columns=['price'])"
"0",""
"0","# Calculate daily returns"
"0","price_data['return'] = price_data['price'].pct_change()"
"0",""
"0","# Define the action space"
"0","def define_action(x):"
"0","    cumulative_return = x.sum()"
"0","    if cumulative_return < 0:"
"0","        return 'Buy'"
"0","    elif cumulative_return == 0:"
"0","        return 'Hold'"
"0","    elif cumulative_return > 0:"
"0","        return 'Sell'"
"0","    else:"
"0","        return 'No Action'"
"0","        "
"0","        "
"0","# Apply the function over rolling window"
"0","price_data.dropna(inplace=True) # Drop first observation with NA in return"
"0","# Initialize an empty column for action"
"0","price_data['action'] = 'No Action'"
"0","price_data[""rolling_return""] = 0"
"0","# Loop through the DataFrame to calculate the actions"
"0","period_length = 5"
"0","for i in range(period_length, len(price_data)):"
"0","    window = price_data['return'].iloc[i-period_length:i+1] # considering the last 5 days including today"
"0","    price_data.at[i, 'action'] = define_action(window)"
"0","    price_data.at[i,""rolling_return""] = window.sum()"
"0","    "
"0","print(price_data)"
"2","<string>:4: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value '-0.00725501406140705' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
"
"1","         price    return     action  rolling_return
1   100.400157 -0.013403  No Action        0.000000
2   100.978738  0.005763  No Action        0.000000
3   102.240893  0.012499  No Action        0.000000
4   101.867558 -0.003652  No Action        0.000000
5    99.022722 -0.027927        Buy       -0.007255
..         ...       ...        ...             ...
95  100.706573  0.003490       Sell        0.004405
96  100.010500 -0.006912       Sell        0.005835
97  101.785870  0.017752        Buy       -0.000444
98  100.126912 -0.016299        Buy       -0.005364
99  100.401989  0.002747  No Action        0.000000

[99 rows x 4 columns]
"
