years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years / sectors)
time <- rep(seq(1980 + years - 1, length.out = years), times = n_parents * subsidiary_per_parent  / sectors)
sector <- sample(rep(1:sectors, each = subsidiary_per_parent * years / sectors))
# True sector-specific intercepts
beta_true <- c(-0.3, 0.2, 0.5, -0.8, 0.1)
# Parent company fixed effects
alpha_parent <- rnorm(n_parents)
# Simulate sales growth rates
sigma_error <- 0.5
y <- alpha_parent[parent_id] + beta_true[sector] + rnorm(length(parent_id), sd = sigma_error)
data <- data.frame(y, parent_id, sector, time)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years)
time <- rep(seq(1980 + years - 1, length.out = years), times = n_parents * subsidiary_per_parent)
sector <- sample(rep(1:sectors, each = subsidiary_per_parent * years / sectors))
# True sector-specific intercepts
beta_true <- c(-0.3, 0.2, 0.5, -0.8, 0.1)
# Parent company fixed effects
alpha_parent <- rnorm(n_parents)
# Simulate sales growth rates
sigma_error <- 0.5
y <- alpha_parent[parent_id] + beta_true[sector] + rnorm(length(parent_id), sd = sigma_error)
data <- data.frame(y, parent_id, sector, time)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id","sector", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
cat("Fixed Effect Estimates:\n")
print(coef(fe_model)[-1], digits = 3)
cat("\n\nRandom Effect Estimates:\n")
print(fixef(re_model), digits = 3)
cat("\n\nHierarchical Linear Model Estimates:\n")
print(ranef(hlm_model)$parent_id[[1]], digits = 3)
print(ranef(hlm_model)$parent_id$sector, digits = 3)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id), data)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id), data)
cat("Fixed Effect Estimates:\n")
print(coef(fe_model)[-1], digits = 3)
cat("\n\nRandom Effect Estimates:\n")
print(fixef(re_model), digits = 3)
cat("\n\nHierarchical Linear Model Estimates:\n")
print(ranef(hlm_model)$parent_id[[1]], digits = 3)
print(ranef(hlm_model)$parent_id$sector, digits = 3)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 10
sectors <- 5
# Generate IDs
parent_id <- rep(1:n_parents, each=subsidiary_per_parent*years)
# Generate time variable
year <- rep(2015:2024, times=n_parents*subsidiary_per_parent)
# Generate sectors
sector <- sample(rep(1:sectors, each=subsidiary_per_parent*years/sectors))
# True sector effects
beta <- rnorm(sectors, 0, 1)
# Parent effects
alpha <- rnorm(n_parents, 0, 1)
# Simulate growth rates
sigma <- 0.05
y <- alpha[parent_id] + beta[sector] + rnorm(length(parent_id), sd=sigma)
# Create dataset
data <- data.frame(y, parent_id, sector, year)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "year"))
# Fit fixed effect model
index <- c("parent_id", "row_number()", "year")
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id), data)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
cat("Fixed Effect Estimates:\n")
print(coef(fe_model)[-1], digits = 3)
cat("\n\nRandom Effect Estimates:\n")
print(fixef(re_model), digits = 3)
cat("\n\nHierarchical Linear Model Estimates:\n")
print(ranef(hlm_model)$parent_id[[1]], digits = 3)
print(ranef(hlm_model)$parent_id$sector, digits = 3)
quarto preview
# R Example: Time Series Analysis of Stock Prices
library(quantmod)
# Fetching stock data
getSymbols("AAPL", src = "yahoo", from = "2020-01-01", to = "2023-12-31")
```R
# R Example: Time Series Analysis of Stock Prices
library(quantmod)
# Fetching stock data
getSymbols("AAPL", src = "yahoo", from = "2020-01-01", to = "2023-12-31")
# Analyzing the closing prices
aapl_close <- Cl(AAPL)
# Plotting the closing prices
plot(aapl_close, main = "AAPL Closing Prices", col = "blue")
# Using a simple time series model - Moving Average
aapl_ma <- rollmean(aapl_close, k = 50, fill = NA)
lines(aapl_ma, col = "red")
# More advanced analysis - ARIMA model
library(forecast)
aapl_arima <- auto.arima(aapl_close)
forecast_aapl <- forecast(aapl_arima, h = 30)
plot(forecast_aapl)
Sys.Date()
# Perform a Bayesian update for stock price prediction
prior <- dbeta(1,1,1) # Uniform prior
likelihood <- dbinom(6, size=10, prob=0.5)
posterior <- prior * likelihood
posterior
#install.packages("RPostgreSQL")
library(RPostgreSQL)
install.packages("RPostgreSQL")
#install.packages("RPostgreSQL")
library(RPostgreSQL)
your_wrds_username="bquinn"
your_wrds_password="adamskiquinn"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_password,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
your_wrds_username="bquinn"
your_wrds_password="adamskiquinn"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
#install.packages("RPostgreSQL")
library(RPostgreSQL)
rm(wrds)
.rs.restartR()
#install.packages("RPostgreSQL")
library(RPostgreSQL)
your_wrds_username="bquinn"
your_wrds_password="adamskiquinn"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = Sys.getenv(your_wrds_username),
password = Sys.getenv(your_wrds_password)
)
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = your_wrds_username,
password = your_wrds_password
)
#install.packages("RPostgreSQL")
library(RPostgreSQL)
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = your_wrds_username,
password = your_wrds_password
)
wrds <- dbConnect(
PostgresSQL(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = your_wrds_username,
password = your_wrds_password
)
# install.packages("RPostgreSQL")
library(RPostgreSQL)
# install.packages("RPostgreSQL")
library(RPostgreSQL)
# install.packages("RPostgreSQL")
library(RPostgreSQL)
wrds_username <- 'your_username'  # Replace with your WRDS username
wrds_password <- 'your_password'  # Replace with your WRDS password
wrds_username <- 'bquinn'
wrds_password <- 'adamskiquinn'
wrds_username <- 'your_username'  # Replace with your WRDS username
wrds_password <- 'your_password'  # Replace with your WRDS password
wrds_username <- 'bquinn'
wrds_password <- 'adamskiquinn'
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = 'wrds',
host = 'wrds-pgdata.wharton.upenn.edu',
port = 9737,
user = wrds_username,
password = wrds_password)
library(rio)
install.packages("rio")
rio::import("~/Downloads/LSPDCompiled.dta")
lspdcombined<-rio::import("~/Downloads/LSPDCompiled.dta")
names(lspdcombined)
table(lspdcombined$Year)
table(lspdcombined$DSSector)
saveRDS(lspdcombined,"lspd2022.rds")
uk_technology_corporates <- lspdcombined |> filter(DSSector = "Software and Computer Services")
uk_technology_corporates <- lspdcombined |> filter(DSSector == "Software and Computer Services")
uk_technology_corporates <- lspdcombined |> filter(DSSector == "Software and Computer Services")
library(tidyverse)
uk_technology_corporates <- lspdcombined |> filter(DSSector == "Software and Computer Services")
View(uk_technology_corporates)
# Convert the 'Sector' categorical variable to a numeric format
corporate_data <- readRDS(lspd2022.rds)
# Convert the 'Sector' categorical variable to a numeric format
corporate_data <- readRDS("lspd2022.rds")
# Convert the 'Sector' categorical variable to a numeric format
corporate_data <- readRDS("lspd2022.rds")
corporate_data$Sector <- as.numeric(as.factor(corporate_data$DSSector))
install.packages("PortfolioAnalytics")
install.packages("rugarch")
install.packages("vars")
install.packages("caret")
install.packages("reticulate")
reticulate::py_available()
reticulate::conda_list()
reticulate::miniconda_path()
reticulate::use_virtualenv("XAI")
reticulate::use_condaenv("XAI")
install.packages("lme4")
library(lme4) # For REM & HLM
library(plm)   # For FEM
set.seed(123)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 10
sectors <- 5
# Generate IDs
parent_id <- rep(1:n_parents, each=subsidiary_per_parent*years)
# Generate time variable
year <- rep(2015:2024, times=n_parents*subsidiary_per_parent)
# Generate sectors
sector <- sample(rep(1:sectors, each=subsidiary_per_parent*years/sectors))
# True sector effects
beta <- rnorm(sectors, 0, 1)
# Parent effects
alpha <- rnorm(n_parents, 0, 1)
# Simulate growth rates
sigma <- 0.05
y <- alpha[parent_id] + beta[sector] + rnorm(length(parent_id), sd=sigma)
# Create dataset
data <- data.frame(y, parent_id, sector, year)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
install.packages("lme4", dependencies = TRUE)
install.packages("lme4", dependencies = TRUE)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
library(lme4) # For REM & HLM
library(plm)   # For FEM
set.seed(123)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 10
sectors <- 5
# Generate IDs
parent_id <- rep(1:n_parents, each=subsidiary_per_parent*years)
# Generate time variable
year <- rep(2015:2024, times=n_parents*subsidiary_per_parent)
# Generate sectors
sector <- sample(rep(1:sectors, each=subsidiary_per_parent*years/sectors))
# True sector effects
beta <- rnorm(sectors, 0, 1)
# Parent effects
alpha <- rnorm(n_parents, 0, 1)
# Simulate growth rates
sigma <- 0.05
y <- alpha[parent_id] + beta[sector] + rnorm(length(parent_id), sd=sigma)
# Create dataset
data <- data.frame(y, parent_id, sector, year)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
tools::package_dependencies("Matrix", which = "LinkingTo", reverse = TRUE)[[1L]]
install.packages("lme4", type = "source")
install.packages("lme4", type = "source")
library(lme4) # For REM & HLM
library(plm)   # For FEM
set.seed(123)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 10
sectors <- 5
# Generate IDs
parent_id <- rep(1:n_parents, each=subsidiary_per_parent*years)
# Generate time variable
year <- rep(2015:2024, times=n_parents*subsidiary_per_parent)
# Generate sectors
sector <- sample(rep(1:sectors, each=subsidiary_per_parent*years/sectors))
# True sector effects
beta <- rnorm(sectors, 0, 1)
# Parent effects
alpha <- rnorm(n_parents, 0, 1)
# Simulate growth rates
sigma <- 0.05
y <- alpha[parent_id] + beta[sector] + rnorm(length(parent_id), sd=sigma)
# Create dataset
data <- data.frame(y, parent_id, sector, year)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
oo <- options(repos = "https://cran.r-project.org/")
install.packages("Matrix")
install.packages("lme4")
options(oo)
install.packages("lme4")
install.packages("Matrix")
.rs.restartR()
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
reticulate::repl_python()
library(reticulate)
py_config()
conda_install("XAI","statsmodels")
reticulate::use_condaenv("r-reticulate")
reticulate::use_condaenv("/Users/barry/anaconda3/envs/XAI")
reticulate::use_condaenv("/Users/barry/anaconda3/envs/XAI",required = TRUE)
reticulate::conda_list()
reticulate::use_python("/Users/barry/Library/r-miniconda/envs/r-reticulate/bin/python")
library(reticulate)
set.seed(42)
dataset1 <- data.frame(id = sample(1:5, size = 5, replace = TRUE), x = runif(5))
dataset2 <- data.frame(id = sample(1:5, size = 5, replace = TRUE), y = runif(5))
merged_dataset <- merge(dataset1, dataset2, by = "id")
stacked_dataset <- bind_rows(dataset1, dataset2)
# Install and load the dplyr package
library(dplyr)
# Example: Simple data frame manipulation
data <- data.frame(
stock_id = c(1, 2, 3, 4),
stock_price = c(100, 150, 120, 130)
)
data <- data %>%
mutate(price_change = stock_price - lag(stock_price))
# Assuming a package like quantmod is installed
library(quantmod)
library(tidyverse)
library(timetk)
library(janitor)
symbol <- "AAPL"
start_date <- as.Date("2020-01-01")
end_date <- Sys.Date()
# Get stock data
getSymbols(symbol, src = "yahoo", from = start_date, to = end_date)
aapl_xts <- AAPL['2020-01-01/']
aapl_df <- fortify.zoo(aapl_xts)
# Convert the 'Sector' categorical variable to a numeric format
corporate_data <- readRDS("lspd2022.rds")
corporate_data$Sector <- as.numeric(as.factor(corporate_data$DSSector))
set.seed(42)
x <- rnorm(100, mean = 10, sd = 2)
std_x <- scale(x)
set.seed(42)
y <- exp((rnorm(100, mean = 1, sd = 1)))
log_y <- log(y + 1)  # Adding a constant prevents taking logs of negative numbers
set.seed(42)
closing_prices <- cumprod(rnorm(100, mean = 0.01, sd = 0.01))
returns <- diff(closing_prices) / lag(closing_prices)
set.seed(42)
age <- runif(1000, min = 0, max = 100)
age_binned <- cut(age, breaks = seq(0, 100, by = 10), labels = FALSE)
set.seed(42)
dataset1 <- data.frame(id = sample(1:5, size = 5, replace = TRUE), x = runif(5))
dataset2 <- data.frame(id = sample(1:5, size = 5, replace = TRUE), y = runif(5))
merged_dataset <- merge(dataset1, dataset2, by = "id")
stacked_dataset <- bind_rows(dataset1, dataset2)
set.seed(42)
closing_prices <- cumprod(rnorm(100, mean = 0.01, sd = 0.01))
returns <- diff(closing_prices) / lag(closing_prices)
# Assuming a package like quantmod is installed
library(tidyquant)
library(tidyr)
library(janitor)
symbol <- "AAPL"
start_date <- as.Date("2020-01-01")
end_date <- Sys.Date()
symbol <- "AAPL"
start_date <- as.Date("2020-01-01")
end_date <- Sys.Date()
# Get stock data
appl<-tq_get(symbol, from = start_date, to = end_date)
set.seed(42)
x <- rnorm(100, mean = 10, sd = 2)
std_x <- scale(x)
tsfe::rescale_variable(x,0,1)
set.seed(42)
dataset1 <- data.frame(id = sample(1:5, sise = 5, replace = TRUE), x = runif(5))
set.seed(42)
dataset1 <- data.frame(id = sample(1:5, size = 5, replace = TRUE), x = runif(5))
dataset2 <- data.frame(id = sample(1:5, size = 5, replace = TRUE), y = runif(5))
merged_dataset <- merge(dataset1, dataset2, by = "id")
stacked_dataset <- bind_rows(dataset,dataset2)
stacked_dataset <- bind_rows(dataset1,dataset2)
