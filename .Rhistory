geom_line(aes(x = index(ema_20), y = as.numeric(ema_20)), color = "blue") +
labs(title = "Exponential Moving Average (EMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "blue"), labels = c("Price", "EMA")) +
theme_minimal()
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(wma_custom), y = as.numeric(wma_custom)), color = "green") +
labs(title = "Weighted Moving Average (WMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "green"), labels = c("Price", "WMA")) +
theme_minimal()
# Savitzky-Golay Filter
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
# Plot Savitzky-Golay Filter
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(sg_filter)), color = "purple") +
labs(title = "Savitzky-Golay Filter",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "purple"), labels = c("Price", "SG Filter")) +
theme_minimal()
# Lowess Smoothing
lowess_smooth <- lowess(aapl_prices)
# Plot Lowess Smoothing
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(lowess_smooth$y)), color = "orange") +
labs(title = "Lowess Smoothing",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "orange"), labels = c("Price", "Lowess")) +
theme_minimal()
model <- dlmModPoly(order = 2, dV = exp(0.5), dW = exp(-1))
# Kalman Filter
model <- dlmModPoly(order = 2)
model$V <- diag(exp(0.5),2)
model$W <- exp(-1)
kalman_filter <- dlmSmooth(model, as.numeric(aapl_prices))
# Load necessary package
library(stats)
# Set initial state vector and covariance matrix
x0 <- c(1, 2) # Initial state vector
P0 <- matrix(c(10, 0, 0, 10), nrow = 2) # Covariance matrix
# Define measurement function (optional)
Fx <- function(x, z) { return(x + rnorm(length(x))) } # Example: adding a noise term to the state vector
# Set input data and measurements as matrices or vectors
inputs <- matrix(c(1, 0), nrow = length(aapl_prices), byrow = TRUE) # Assuming you have a time series of length 'n' for inputs
measurements <- ts(data, frequency = 1)$values # Assuming 'data' is your time series data
measurements <- ts(aapl_prices, frequency = 1)$values # Assuming 'data' is your time series data
kalman_filter <- dlmSmooth(model, as.numeric(aapl_prices$AAPL.Adjusted))
measurements <- ts(aapl_prices$AAPL.Close, frequency = 1)$values # Assuming 'data' is your time series data
measurements <- ts(aapl_prices$AAPL.Close, frequency = 1) # Assuming 'data' is your time series data
# Apply the Kalman filter
kalman_filter_output <- kalmanFilter(x0, P0, Fx, measurements, inputs)
# Load necessary package
library(stats)
# Apply the Kalman filter
kalman_filter_output <- kalmanFilter(x0, P0, Fx, measurements, inputs)
kalman_filter <- dlmSmooth(aapl_close,model)
Nile
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
plot(aapl_prices, type ='o')
lines(dropFirst(s$s), col = "red")
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(s$s[, 1]))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 1500, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15, dW = 140))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(2, dV = 15, dW = 140))
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15000, dW = 140000))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter with adjusted dV and dW values
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 1e-6, dW = 1e-4))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter with adjusted dV and dW values
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 1e-68, dW = 1e-4))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
library(ggplot2)
# Lowess Smoothing
lowess_smooth <- lowess(aapl_prices)
# Plot Lowess Smoothing
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(lowess_smooth$y)), color = "orange") +
labs(title = "Lowess Smoothing",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "orange"), labels = c("Price", "Lowess")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
library(ggplot2)
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date))
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close")
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
data_df |>
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
install.packages("PortfolioAnalytics")
install.packages("tidyquant")
install.packages("janitor")
remotes::install_github("quinfer/tsfe")
install.packages("caret")
install.packages("lme4")
install.packages("plm")
library(ggplot2)
# Compare with real stock price data
price_data <- data.frame(Time = 1:length(closing_prices),
Real = as.numeric(closing_prices),
Simulated = as.numeric(sim_prices))
#| include: false
# Load the required packages
library(forecast)
library(ggplot2)
library(dplyr)
library(tibble)
library(knitr)
library(kableExtra)
library(rugarch)
library(quantmod)
library(tseries)
library(fGarch)
library(rmarkdown)
library(urca)
# Initial and final prices of the stock
initial_price <- 100
final_price <- 150
# Investment period in years
years <- 3
# Calculating the annualized return
annualized_return <- (final_price / initial_price)^(1/years) - 1
# Output the annualized return
print(annualized_return)
# Dataset of stock prices
stock_prices <- c(120, 125, 130, 128, 135)
# Summary statistics
summary_stats <- summary(stock_prices)
# Output the summary statistics
print(summary_stats)
# Returns of a stock
stock_returns <- c(0.05, 0.02, -0.03, 0.04, 0.01)
# Calculating standard deviation
risk_measure <- sd(stock_returns)
# Output the standard deviation
print(risk_measure)
# Probability of getting heads in a fair coin toss
probability_heads <- 1 / 2
# Output the probability
print(probability_heads)
# Historical stock prices
stock_prices <- c(120, 122, 121, 123, 125)
# Forecast using a simple moving average of the last 3 prices
forecast_price <- mean(tail(stock_prices, n=3))
# Output the forecasted price
print(forecast_price)
# Historical returns of a portfolio
portfolio_returns <- c(-0.05, 0.1, 0.03, -0.02, 0.04)
# Confidence level (e.g., 95%)
alpha <- 0.05
# Calculating VaR
VaR <- quantile(portfolio_returns, alpha)
# Output the VaR
print(VaR)
# Uniform prior distribution
prior <- dbeta(1, 2, 1)
# Binomial likelihood based on new evidence (e.g., 6 increases in 10 periods)
likelihood <- dbinom(6, size=10, prob=0.5)
# Calculating the posterior distribution
posterior <- prior * likelihood
# Output the posterior probability
print(posterior)
# Returns from a new investment strategy
strategy_returns <- c(0.07, 0.08, 0.09, 0.06, 0.1)
# Market average returns for comparison
market_returns <- c(0.05, 0.05, 0.05, 0.05, 0.05)
# Performing a t-test
t_test_result <- t.test(strategy_returns, market_returns)
# Output the t-test results
print(t_test_result)
# Assuming stock_prices is a time series object
# Install and load the forecast package
library(forecast)
# Fitting an ARIMA model
arima_model <- auto.arima(stock_prices)
# Forecasting the next value
forecast_result <- forecast(arima_model, h=1)
# Output the forecast
print(forecast_result)
# Load the quadprog library for quadratic programming
library(quadprog)
# Generate a sequence of 10 dates, one day apart
N = 10
start_date <- as.Date("2023-01-01")
dates <- seq.Date(from = start_date, by = "day", length.out = N)
# Define the historical returns for four assets
historical_returns <- data.frame("Asset1"=rnorm(N, mean = 0.04),
"Asset2"=rnorm(N, mean = 0.03),
"Asset3"=rnorm(N, mean = 0.09),
"Asset4"=rnorm(N, mean = 0.01))
rownames(historical_returns) <- dates
# Calculate the covariance matrix of returns
Dmat <- cov(historical_returns)
# Define dvec as zero for minimum variance portfolio
dvec <- rep(0, ncol(historical_returns))
# Define the constraints (sum of weights = 1)
# Amat needs to have as many rows as there are assets plus one for the sum constraint
Amat <- cbind(1, diag(ncol(historical_returns)))
bvec <- c(1, rep(0, ncol(historical_returns)))
# Specify and solve the optimization problem
sol <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1)
# Extract the optimal weights
optimal_weights <- sol$solution
# Print the optimal weights
print(optimal_weights)
# Install and load necessary packages
library(quantmod)
# Download historical stock prices for Apple Inc. (AAPL)
getSymbols("AAPL", from = "2018-01-01", to = "2023-12-31")
# Extract the closing prices and calculate daily returns
closing_prices <- Cl(AAPL)
daily_returns <- dailyReturn(AAPL)
# Plot the closing prices over time
plot(closing_prices, main = "Apple Inc. (AAPL) Closing Prices",
xlab = "Time", ylab = "Price", col = "blue")
# Plot the daily returns over time
plot(daily_returns, main = "Apple Inc. (AAPL) Daily Returns",
xlab = "Time", ylab = "Return", col = "red")
library(signal)
# Apply smoothing techniques
sma_20 <- SMA(closing_prices, n = 20)
ema_0.1 <- EMA(closing_prices, n = 20, wilder = FALSE, ratio = 0.1)
sg_filtered <- sgolayfilt(closing_prices, p = 3, n = 21)
lowess_smoothed <- lowess(closing_prices)
# Plot the original price series and smoothed series
plot(closing_prices, main = "Apple Inc. (AAPL) Closing Prices with Smoothing",
xlab = "Time", ylab = "Price", col = "black")
lines(sma_20, col = "blue")
lines(ema_0.1, col = "red")
lines(sg_filtered, col = "green")
lines(lowess_smoothed$y, col = "purple")
legend("topleft", legend = c("Original", "SMA (20)", "EMA (0.1)", "Savitzky-Golay", "Lowess"),
col = c("black", "blue", "red", "green", "purple"), lty = 1)
library(tseries)
library(tidyverse)
# Test for stationarity using the ADF test
adf_test <- adf.test(closing_prices)
print(adf_test)
# If non-stationary, apply differencing
if (adf_test$p.value > 0.05) {
differenced_prices <- diff(closing_prices)
# remove NAs from differenced series
differenced_prices <- na.omit(differenced_prices)
adf_test_diff <- adf.test(differenced_prices)
print(adf_test_diff)
}
# Fit an ARIMA model
arima_model <- auto.arima(closing_prices)
print(summary(arima_model))
# Forecast the next 30 days
forecast_30 <- forecast(arima_model, h = 30)
plot(forecast_30, main = "ARIMA Forecast for Apple Inc. (AAPL) Closing Prices",
xlab = "Time", ylab = "Price")
# Install and load necessary packages
library(rugarch)
# Specify the GARCH(1,1) model
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0)),
variance.model = list(garchOrder = c(1, 1),
model = "sGARCH",
submodel = NULL),
distribution.model = "norm",
fixed.pars = list(mu = 0, omega = 0.1, alpha1 = 0.1, beta1 = 0.8))
# Simulate a GARCH(1,1) process
garch_sim <- ugarchpath(spec, n.sim = 1000, m.sim = 1)
# Fit a GARCH(1,1) model to the simulated data
garch_fit <- ugarchfit(spec, garch_sim@path$seriesSim)
print(garch_fit)
# Compare the estimated parameters with the true values
print(coef(garch_fit))
print(garch_sim@model$pars)
# Download historical stock prices for two related companies
library(quantmod)
getSymbols("AAPL", from = "2018-01-01", to = "2023-12-31")
getSymbols("MSFT", from = "2018-01-01", to = "2023-12-31")
# Extract the closing prices
aapl_prices <- Cl(AAPL)
msft_prices <- Cl(MSFT)
# Perform cointegration analysis
library(urca)
coint_test <- ca.jo(cbind(aapl_prices, msft_prices), type = "trace", K = 2, ecdet = "none", spec = "transitory")
summary(coint_test)
# Estimate a VECM if cointegration is found
if (coint_test@teststat[1] > coint_test@cval[1,2]) {
vecm_model <- cajorls(coint_test, r = 1)
print(summary(vecm_model$rlm))
}
# Conduct Granger causality test
library(lmtest)
grangertest(aapl_prices ~ msft_prices, order = 1)
grangertest(msft_prices ~ aapl_prices, order = 1)
# Simulate a random walk process
set.seed(123)
n_steps <- 1000
drift <- 0.001
volatility <- 0.02
initial_price <- 100
steps <- sample(c(-1, 1), size = n_steps, replace = TRUE)
steps[1] <- 0
returns <- drift + volatility * steps
sim_prices <- initial_price * exp(cumsum(returns))
# Plot the simulated price series
plot(sim_prices, type = "l", main = "Simulated Random Walk Process",
xlab = "Time", ylab = "Price")
# Calculate daily returns
sim_returns <- diff(log(sim_prices))
library(ggplot2)
# Compare with real stock price data
price_data <- data.frame(Time = 1:length(closing_prices),
Real = as.numeric(closing_prices),
Simulated = as.numeric(sim_prices))
# Compare with real stock price data
price_data <- data.frame(Time = 1:length(closing_prices[1:length(sim_prices)]),
Real = as.numeric(closing_prices),
Simulated = as.numeric(sim_prices))
# Compare with real stock price data
price_data <- data.frame(Time = 1:length(closing_prices[1:length(sim_prices)]),
Real = as.numeric(closing_prices[1:length(sim_prices)]),
Simulated = as.numeric(sim_prices))
ggplot(data = price_data, aes(x = Time)) +
geom_line(aes(y = Real, color = "Real"), linewidth = 1) +
geom_line(aes(y = Simulated, color = "Simulated"), linewidth = 1) +
scale_color_manual(values = c("Real" = "blue", "Simulated" = "red")) +
labs(title = "Comparison of Real and Simulated Price Series",
x = "Time",
y = "Price") +
theme_minimal()
# Compare return distributions
return_data <- data.frame(Return = c(daily_returns, sim_returns),
Type = c(rep("Real", length(daily_returns)),
rep("Simulated", length(sim_returns))))
# Compare return distributions
return_data <- data.frame(Return = c(daily_returns, sim_returns),
# Compare return distributions
return_data <- data.frame(Return = c(daily_returns, sim_returns),
# Compare return distributions
return_data <- data.frame(Return = c(daily_returns, sim_returns),
Type = c(rep("Real", length(daily_returns)),
rep("Simulated", length(sim_returns))))
ggplot(data = return_data, aes(x = Return, fill = Type)) +
# Compare return distributions
return_data <- data.frame(Return = c(daily_returns, sim_returns),
Type = c(rep("Real", length(daily_returns)),
rep("Simulated", length(sim_returns))))
