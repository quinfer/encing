# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios, aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster", x = "Week", y = "Avg. Return", color = "Cluster")
# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios, aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster", x = "Week", y = "Avg. Return", color = "Cluster") +
theme(text = element_text(size = 3))
View(portfolios)
# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios |> select(stock %in% c("V1","V10","V100")) , aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster", x = "Week", y = "Avg. Return", color = "Cluster") +
theme(text = element_text(size = 8))
# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios |> filter(stocks %in% c("V1","V10","V100")) , aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster", x = "Week", y = "Avg. Return", color = "Cluster") +
theme(text = element_text(size = 8))
# Group data by stock, cluster, and date
portfolios <- returns %>%
mutate(Week = floor((as.numeric(date) - min(as.numeric(date))) / 7)) %>%
group_by(Week, stock, Cluster) %>%
summarise(avg_return = mean(Return)) |>
ungroup()
# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios |> filter(stocks %in% c("V1","V10","V100")) , aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster", x = "Week", y = "Avg. Return", color = "Cluster") +
theme(text = element_text(size = 8))
# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios |> filter(stock %in% c("V1","V10","V100")) , aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster", x = "Week", y = "Avg. Return", color = "Cluster") +
theme(text = element_text(size = 8))
# Plot boxplots for each stock and week, colored by cluster
ggplot(portfolios |> filter(stock %in% c("V1","V13","V99","V50")) , aes(factor(Week), avg_return, color = factor(Cluster))) +
geom_boxplot() +
facet_wrap(~ stock) +
labs(title = "Returns by Stock and Cluster for 3 of 100 stocks", x = "Week", y = "Avg. Return", color = "Cluster") +
theme(text = element_text(size = 8))
p <- rnorm(n, mean = 0.05, sd = 0.1) # Log return sequence
prices <- exp(cumsum(p)) # Actual prices
actions <- ifelse(diff(log(prices)) > 0, 1, -1) # Buy (-1) or Sell (1)
head(data.frame(Prices = prices, Actions = actions))
# Generate synthetic financial data
n <- 1000
p <- rnorm(n, mean = 0.05, sd = 0.1) # Log return sequence
prices <- exp(cumsum(p)) # Actual prices
actions <- ifelse(diff(log(prices)) > 0, 1, -1) # Buy (-1) or Sell (1)
head(data.frame(Prices = prices, Actions = actions))
head(data.frame(Prices = prices, Actions = c(NA,actions))
library(rl)
head(data.frame(Prices = prices, Actions = c(NA,actions)))
library(rl)
devtools::install_github("smilesun/rlR")
#devtools::install_github("smilesun/rlR")
#library(rl)
# Define state space
state_size <- ncol(as.matrix(lag(t(as.matrix(data.bind(data.frame(Prices = prices)))), k = 1)))
# Define state space
state_size <- ncol(as.matrix(lag(t(as.matrix(data.frame(Prices = prices)))), k = 1)))
# Define state space
state_size <- ncol(as.matrix(lag(t(as.matrix(data.frame(Prices = prices)))), k = 1))
action_size <- 2
# Initialize Q matrix
Q <- matrix(rep(NA, state_size * action_size), nrow = state_size, ncol = action_size)
# Set hyperparameters
alpha <- 0.1 # Learning rate
epsilon <- 0.1 # Exploration probability
num_episodes <- 1000 # Number of episodes
discount_factor <- 0.95 # Discount factor
# Implement Q-learning
for (episode in seq(num_episodes)) {
state <- head(as.numeric(as.matrix(lag(t(as.matrix(data.bind(data.frame(Prices = prices))))), k = 1)), 1)
done <- FALSE
while (!done) {
if (runif(1) <= epsilon) {
# Explore randomly
action <- sample(seq(-1, 1), size = 1)
} else {
# Choose greedily
action <- argmax(Q[state,])
}
next_state <- tail(as.numeric(as.matrix(lag(t(as.matrix(data.bind(data.frame(Prices = prices))))), k = 1)), 1)
reward <- actions[episode] * (tail(prices, 1) / prices[episode + 1] - 1)
# Update Q-value
old_q <- Q[state, action]
new_q <- reward + discount_factor * max(Q[next_state,])
delta <- new_q - old_q
Q[state, action] <- old_q + alpha * delta
state <- next_state
done <- episode == num_episodes || length(states) >= n
}
}
# Implement Q-learning
for (episode in seq(num_episodes)) {
state <- head(as.numeric(as.matrix(lag(t(as.matrix((data.frame(Prices = prices))))), k = 1)), 1)
done <- FALSE
while (!done) {
if (runif(1) <= epsilon) {
# Explore randomly
action <- sample(seq(-1, 1), size = 1)
} else {
# Choose greedily
action <- argmax(Q[state,])
}
next_state <- tail(as.numeric(as.matrix(lag(t(as.matrix(data.bind(data.frame(Prices = prices))))), k = 1)), 1)
reward <- actions[episode] * (tail(prices, 1) / prices[episode + 1] - 1)
# Update Q-value
old_q <- Q[state, action]
new_q <- reward + discount_factor * max(Q[next_state,])
delta <- new_q - old_q
Q[state, action] <- old_q + alpha * delta
state <- next_state
done <- episode == num_episodes || length(states) >= n
}
}
next_state <- tail(as.numeric(as.matrix(lag(t(as.matrix(data.frame(Prices = prices))))), k = 1), 1)
#devtools::install_github("smilesun/rlR")
#library(rl)
# Define state space
state_size <- ncol(as.matrix(lag(t(as.matrix(data.frame(Prices = prices)))), k = 1))
action_size <- 2
# Initialize Q matrix
Q <- matrix(rep(NA, state_size * action_size), nrow = state_size, ncol = action_size)
# Set hyperparameters
alpha <- 0.1 # Learning rate
epsilon <- 0.1 # Exploration probability
num_episodes <- 1000 # Number of episodes
discount_factor <- 0.95 # Discount factor
# Implement Q-learning
for (episode in seq(num_episodes)) {
state <- head(as.numeric(as.matrix(lag(t(as.matrix((data.frame(Prices = prices))))), k = 1)), 1)
done <- FALSE
while (!done) {
if (runif(1) <= epsilon) {
# Explore randomly
action <- sample(seq(-1, 1), size = 1)
} else {
# Choose greedily
action <- which.max(Q[state,])
}
next_state <- tail(as.numeric(as.matrix(lag(t(as.matrix(data.frame(Prices = prices))))), k = 1), 1)
reward <- actions[episode] * (tail(prices, 1) / prices[episode + 1] - 1)
# Update Q-value
old_q <- Q[state, action]
new_q <- reward + discount_factor * max(Q[next_state,])
delta <- new_q - old_q
Q[state, action] <- old_q + alpha * delta
state <- next_state
done <- episode == num_episodes || length(states) >= n
}
}
reticulate::repl_python()
library(lme4) # For REM & HLM
library(plm)   # For FEM
set.seed(123)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years)
time <- rep(seq(1980 + year - 1, length.out = years), times = n_parents * subsidiary_per_parent)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years)
time <- rep(seq(1980 + years - 1, length.out = years), times = n_parents * subsidiary_per_parent)
sector <- sample(rep(1:sectors, each = subsidiary_per_parent * years / sectors))
# True sector-specific intercepts
beta_true <- c(-0.3, 0.2, 0.5, -0.8, 0.1)
# Parent company fixed effects
alpha_parent <- rnorm(n_parents)
# Simulate sales growth rates
sigma_error <- 0.5
y <- alpha_parent[parent_id] + beta_true[sector] + rnorm(length(parent_id), sd = sigma_error)
data <- data.frame(y, parent_id, sector, time)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
View(data)
View(data)
table(index(data), useNA = "ifany")
table(index(data), useNA = "ifany")
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id","sector", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id","sector", "time"))
View(data)
data |> distinct(parent_id,sector,time)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years* sectors)
time <- rep(seq(1980 + years - 1, length.out = years), times = n_parents * subsidiary_per_parent * sectors)
sector <- sample(rep(1:sectors, each = subsidiary_per_parent * years / sectors))
# True sector-specific intercepts
beta_true <- c(-0.3, 0.2, 0.5, -0.8, 0.1)
# Parent company fixed effects
alpha_parent <- rnorm(n_parents)
# Simulate sales growth rates
sigma_error <- 0.5
y <- alpha_parent[parent_id] + beta_true[sector] + rnorm(length(parent_id), sd = sigma_error)
data <- data.frame(y, parent_id, sector, time)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id","sector", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
View(data)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years / sectors)
time <- rep(seq(1980 + years - 1, length.out = years), times = n_parents * subsidiary_per_parent  / sectors)
sector <- sample(rep(1:sectors, each = subsidiary_per_parent * years / sectors))
# True sector-specific intercepts
beta_true <- c(-0.3, 0.2, 0.5, -0.8, 0.1)
# Parent company fixed effects
alpha_parent <- rnorm(n_parents)
# Simulate sales growth rates
sigma_error <- 0.5
y <- alpha_parent[parent_id] + beta_true[sector] + rnorm(length(parent_id), sd = sigma_error)
data <- data.frame(y, parent_id, sector, time)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 6
sectors <- 5
# Generate synthetic dataset
parent_id <- rep(1:n_parents, each = subsidiary_per_parent * years)
time <- rep(seq(1980 + years - 1, length.out = years), times = n_parents * subsidiary_per_parent)
sector <- sample(rep(1:sectors, each = subsidiary_per_parent * years / sectors))
# True sector-specific intercepts
beta_true <- c(-0.3, 0.2, 0.5, -0.8, 0.1)
# Parent company fixed effects
alpha_parent <- rnorm(n_parents)
# Simulate sales growth rates
sigma_error <- 0.5
y <- alpha_parent[parent_id] + beta_true[sector] + rnorm(length(parent_id), sd = sigma_error)
data <- data.frame(y, parent_id, sector, time)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id","sector", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
cat("Fixed Effect Estimates:\n")
print(coef(fe_model)[-1], digits = 3)
cat("\n\nRandom Effect Estimates:\n")
print(fixef(re_model), digits = 3)
cat("\n\nHierarchical Linear Model Estimates:\n")
print(ranef(hlm_model)$parent_id[[1]], digits = 3)
print(ranef(hlm_model)$parent_id$sector, digits = 3)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id), data)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id), data)
cat("Fixed Effect Estimates:\n")
print(coef(fe_model)[-1], digits = 3)
cat("\n\nRandom Effect Estimates:\n")
print(fixef(re_model), digits = 3)
cat("\n\nHierarchical Linear Model Estimates:\n")
print(ranef(hlm_model)$parent_id[[1]], digits = 3)
print(ranef(hlm_model)$parent_id$sector, digits = 3)
# Number of parents, number of subsidiaries per parent, number of years, and number of sectors
n_parents <- 100
subsidiary_per_parent <- 4
years <- 10
sectors <- 5
# Generate IDs
parent_id <- rep(1:n_parents, each=subsidiary_per_parent*years)
# Generate time variable
year <- rep(2015:2024, times=n_parents*subsidiary_per_parent)
# Generate sectors
sector <- sample(rep(1:sectors, each=subsidiary_per_parent*years/sectors))
# True sector effects
beta <- rnorm(sectors, 0, 1)
# Parent effects
alpha <- rnorm(n_parents, 0, 1)
# Simulate growth rates
sigma <- 0.05
y <- alpha[parent_id] + beta[sector] + rnorm(length(parent_id), sd=sigma)
# Create dataset
data <- data.frame(y, parent_id, sector, year)
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "time"))
# Fit fixed effect model
fe_model <- plm(y ~ factor(sector), data, index = c("parent_id", "year"))
# Fit fixed effect model
index <- c("parent_id", "row_number()", "year")
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id), data)
# Fit fixed effect model
# Create subsidiary id
sub_id <- 1:n_parents*subsidiary_per_parent*years
data$sub_id <- sub_id
index <- c("parent_id", "sub_id", "year")
# Model
fe_model <- plm(y ~ factor(sector), data, index = index)
# Fit random effect model
re_model <- lmer(y ~ factor(sector) + (1 | parent_id), data)
# Fit hierarchical linear model
hlm_model <- lmer(y ~ factor(sector) + (1|parent_id/sector), data)
cat("Fixed Effect Estimates:\n")
print(coef(fe_model)[-1], digits = 3)
cat("\n\nRandom Effect Estimates:\n")
print(fixef(re_model), digits = 3)
cat("\n\nHierarchical Linear Model Estimates:\n")
print(ranef(hlm_model)$parent_id[[1]], digits = 3)
print(ranef(hlm_model)$parent_id$sector, digits = 3)
quarto preview
# R Example: Time Series Analysis of Stock Prices
library(quantmod)
# Fetching stock data
getSymbols("AAPL", src = "yahoo", from = "2020-01-01", to = "2023-12-31")
```R
# R Example: Time Series Analysis of Stock Prices
library(quantmod)
# Fetching stock data
getSymbols("AAPL", src = "yahoo", from = "2020-01-01", to = "2023-12-31")
# Analyzing the closing prices
aapl_close <- Cl(AAPL)
# Plotting the closing prices
plot(aapl_close, main = "AAPL Closing Prices", col = "blue")
# Using a simple time series model - Moving Average
aapl_ma <- rollmean(aapl_close, k = 50, fill = NA)
lines(aapl_ma, col = "red")
# More advanced analysis - ARIMA model
library(forecast)
aapl_arima <- auto.arima(aapl_close)
forecast_aapl <- forecast(aapl_arima, h = 30)
plot(forecast_aapl)
Sys.Date()
# Perform a Bayesian update for stock price prediction
prior <- dbeta(1,1,1) # Uniform prior
likelihood <- dbinom(6, size=10, prob=0.5)
posterior <- prior * likelihood
posterior
#install.packages("RPostgreSQL")
library(RPostgreSQL)
install.packages("RPostgreSQL")
#install.packages("RPostgreSQL")
library(RPostgreSQL)
your_wrds_username="bquinn"
your_wrds_password="adamskiquinn"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_password,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
your_wrds_username="bquinn"
your_wrds_password="adamskiquinn"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
#install.packages("RPostgreSQL")
library(RPostgreSQL)
rm(wrds)
.rs.restartR()
#install.packages("RPostgreSQL")
library(RPostgreSQL)
your_wrds_username="bquinn"
your_wrds_password="adamskiquinn"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(PostgreSQL(),
user = your_wrds_username,
password = your_wrds_password,
host = "wrds-pgdata.wharton.upenn.edu",
port = 9737,
dbname = "wrds")
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = Sys.getenv(your_wrds_username),
password = Sys.getenv(your_wrds_password)
)
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = your_wrds_username,
password = your_wrds_password
)
#install.packages("RPostgreSQL")
library(RPostgreSQL)
your_wrds_username="bquinn"
your_wrds_password="hydT6K4pPyFZk8m"
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = your_wrds_username,
password = your_wrds_password
)
wrds <- dbConnect(
PostgresSQL(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = your_wrds_username,
password = your_wrds_password
)
# install.packages("RPostgreSQL")
library(RPostgreSQL)
# install.packages("RPostgreSQL")
library(RPostgreSQL)
# install.packages("RPostgreSQL")
library(RPostgreSQL)
wrds_username <- 'your_username'  # Replace with your WRDS username
wrds_password <- 'your_password'  # Replace with your WRDS password
wrds_username <- 'bquinn'
wrds_password <- 'adamskiquinn'
wrds_username <- 'your_username'  # Replace with your WRDS username
wrds_password <- 'your_password'  # Replace with your WRDS password
wrds_username <- 'bquinn'
wrds_password <- 'adamskiquinn'
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = 'wrds',
host = 'wrds-pgdata.wharton.upenn.edu',
port = 9737,
user = wrds_username,
password = wrds_password)
