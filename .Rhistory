# Plot
ggplot(df, aes(x = time, y = series)) +
geom_line() +
ggtitle("Simulated Time Series with Trend, Seasonality, Cyclical, and Irregular Components") +
xlab("Time (Months)") +
ylab("Value")
# Install and load necessary packages
#install.packages("tseries")
library(tseries)
# Example: Simulated non-stationary time series
set.seed(123)
non_stationary_ts <- cumsum(rnorm(100))
# Augmented Dickey-Fuller Test
adf.test(non_stationary_ts)
# Plot the time series
plot(non_stationary_ts, main = "Simulated Non-Stationary Time Series", ylab = "Value", xlab = "Time")
# Load the required package
library(TTR)
# Generate a sample time series
set.seed(123)
data <- cumsum(rnorm(100))
# Calculate the SMA with a window size of 10
sma_10 <- SMA(data, n = 10)
# Plot the original data and the smoothed series
plot(data, type = "l", col = "blue", main = "Simple Moving Average", xlab = "Time", ylab = "Value")
lines(sma_10, col = "red")
legend("topright", legend = c("Original Data", "SMA (n=10)"), col = c("blue", "red"), lty = 1)
# Load the required package
library(TTR)
# Generate a sample time series
set.seed(123)
data <- cumsum(rnorm(100))
# Calculate the EMA with a smoothing factor of 0.2
ema_02 <- EMA(data, n = 0.2)
#coerce the data to be in xts format
data <- xts(cumsum(rnorm(100)), order.by = Sys.Date() - 100:1)
# Calculate the EMA with a smoothing factor of 0.2
ema_02 <- EMA(data, n = 0.2)
View(data)
library(forecast)
# Create a sample financial time series data
data <- ts(c(100, 105, 110, 115, 120, 125, 130, 135, 140, 145), start = c(2020, 1), frequency = 12)
# Perform exponential smoothing
smoothed_data <- ses(data, alpha = 0.2, initial = "simple", h = 3)
# Print the smoothed data
print(smoothed_data)
# Plot the original and smoothed data
plot(smoothed_data, main = "Exponential Smoothing", xlab = "Time", ylab = "Value")
lines(data, col = "blue")
legend("topleft", lty = 1, col = c("red", "blue"), legend = c("Smoothed", "Original"))
# Plot the original and smoothed data
plot(smoothed_data, main = "Exponential Smoothing", xlab = "Time", ylab = "Value")
# Define a custom weighted moving average function
wma <- function(x, weights) {
n <- length(weights)
filter <- rep(NA, length(x))
for (i in n:length(x)) {
filter[i] <- sum(weights * x[(i - n + 1):i]) / sum(weights)
}
return(filter)
}
# Generate a sample time series
set.seed(123)
data <- cumsum(rnorm(100))
# Calculate the WMA with custom weights
weights <- c(0.1, 0.2, 0.3, 0.2, 0.2)
wma_custom <- wma(data, weights)
# Plot the original data and the smoothed series
plot(data, type = "l", col = "blue", main = "Weighted Moving Average", xlab = "Time", ylab = "Value")
lines(wma_custom, col = "red")
legend("topright", legend = c("Original Data", "WMA (Custom Weights)"), col = c("blue", "red"), lty = 1)
# Load the required package
library(signal)
# Generate a sample time series
set.seed(123)
data <- cumsum(rnorm(100))
# Apply the Savitzky-Golay filter
sg_filter <- sgolayfilt(data, p = 3, n = 11)
# Plot the original data and the smoothed series
plot(data, type = "l", col = "blue", main = "Savitzky-Golay Filter", xlab = "Time", ylab = "Value")
lines(sg_filter, col = "red")
legend("topright", legend = c("Original Data", "Savitzky-Golay Filter"), col = c("blue", "red"), lty = 1)
# Load the required package
library(stats)
# Generate a sample time series
set.seed(123)
data <- cumsum(rnorm(100))
# Apply the Lowess smoother
lowess_smooth <- lowess(data)
# Plot the original data and the smoothed series
plot(data, type = "l", col = "blue", main = "Lowess Smoothing", xlab = "Time", ylab = "Value")
lines(lowess_smooth$y, col = "red")
legend("topright", legend = c("Original Data", "Lowess Smoother"), col = c("blue", "red"), lty = 1)
# Load the required package
library(dlm)
# Generate a sample time series
set.seed(123)
data <- cumsum(rnorm(100))
# Define the Kalman filter model
model <- dlmModPoly(order = 2, dV = exp(0.5), dW = exp(-1))
# Load required packages
library(quantmod)
library(TTR)
library(ggplot2)
# Retrieve historical stock data for Apple Inc. (AAPL)
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
# Extract the adjusted closing prices
aapl_prices <- Cl(AAPL)
# Simple Moving Average (SMA)
sma_20 <- SMA(aapl_prices, n = 20)
# Exponential Moving Average (EMA)
ema_20 <- EMA(aapl_prices, n = 20)
# Weighted Moving Average (WMA)
wma_weights <- c(0.1, 0.2, 0.3, 0.2, 0.2)
wma_custom <- TTR::WMA(aapl_prices, wma_weights)
wma_custom <- TTR::WMA(aapl_prices, n=5, wma_weights)
# Savitzky-Golay Filter
library(signal)
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
# Lowess Smoothing
library(stats)
lowess_smooth <- lowess(aapl_prices)
# Convert data to data frame for ggplot2
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
SMA = as.numeric(sma_20),
EMA = as.numeric(ema_20),
WMA = as.numeric(wma_custom),
SG = as.numeric(sg_filter),
Lowess = as.numeric(lowess_smooth$y))
# Reshape data from wide to long format for plotting
library(tidyr)
data_long <- gather(data_df, key = "Series", value = "Value", -Date)
# Create the plot using ggplot2
ggplot(data_long, aes(x = Date, y = Value, color = Series)) +
geom_line() +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(values = c("black", "red", "blue", "green", "purple", "orange")) +
theme_minimal()
# Load required packages
library(quantmod)
library(TTR)
library(ggplot2)
# Retrieve historical stock data for Apple Inc. (AAPL)
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
# Extract the adjusted closing prices
aapl_prices <- Cl(AAPL)
# Simple Moving Average (SMA)
sma_20 <- SMA(aapl_prices, n = 100)
# Exponential Moving Average (EMA)
ema_20 <- EMA(aapl_prices, n = 100)
# Weighted Moving Average (WMA)
wma_weights <- c(0.1, 0.2, 0.3, 0.2, 0.2)
wma_custom <- TTR::WMA(aapl_prices, n=5, wma_weights)
# Savitzky-Golay Filter
library(signal)
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
# Lowess Smoothing
library(stats)
lowess_smooth <- lowess(aapl_prices)
# Convert data to data frame for ggplot2
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
SMA = as.numeric(sma_20),
EMA = as.numeric(ema_20),
WMA = as.numeric(wma_custom),
SG = as.numeric(sg_filter),
Lowess = as.numeric(lowess_smooth$y))
# Reshape data from wide to long format for plotting
library(tidyr)
data_long <- gather(data_df, key = "Series", value = "Value", -Date)
# Create the plot using ggplot2
ggplot(data_long, aes(x = Date, y = Value, color = Series)) +
geom_line() +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(values = c("black", "red", "blue", "green", "purple", "orange")) +
theme_minimal()
# Load required libraries
library(quantmod)
library(TTR)
library(ggplot2)
library(dlm)
# Retrieve historical stock data for Apple Inc. (AAPL)
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
# Extract the adjusted closing prices
aapl_prices <- Cl(AAPL)
# Simple Moving Average (SMA)
sma_20 <- SMA(aapl_prices, n = 20)
# Exponential Moving Average (EMA)
ema_20 <- EMA(aapl_prices, n = 20)
# Weighted Moving Average (WMA)
wma_custom <- WMA(aapl_prices, n = 5, wts = c(0.1, 0.2, 0.3, 0.2, 0.2))
# Savitzky-Golay Filter
library(signal)
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
# Lowess Smoothing
library(stats)
lowess_smooth <- lowess(aapl_prices)
# Kalman Filter
model <- dlmModPoly(order = 2, dV = exp(0.5), dW = exp(-1))
# Load required packages
library(quantmod)
library(TTR)
library(ggplot2)
library(dlm)
library(signal)
library(stats)
# Retrieve historical stock data for Apple Inc. (AAPL)
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
# Extract the adjusted closing prices
aapl_prices <- Cl(AAPL)
# Simple Moving Average (SMA)
sma_20 <- SMA(aapl_prices, n = 20)
# Exponential Moving Average (EMA)
ema_20 <- EMA(aapl_prices, n = 20)
# Weighted Moving Average (WMA)
wma_custom <- WMA(aapl_prices, n = 5, wts = c(0.1, 0.2, 0.3, 0.2, 0.2))
# Weighted Moving Average (WMA)
wma_custom <- WMA(aapl_prices, n = 5, wts = c(0.1, 0.2, 0.3, 0.2, 0.2))
# Savitzky-Golay Filter
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
# Lowess Smoothing
lowess_smooth <- lowess(aapl_prices)
# Kalman Filter
model <- dlmModPoly(order = 2)
model$V <- exp(0.5)
model$W <- exp(-1)
kalman_filter <- dlmSmooth(model, as.numeric(aapl_prices))
# Simple Moving Average (SMA)
sma_20 <- SMA(aapl_prices, n = 20)
# Plot SMA
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(sma_20), y = as.numeric(sma_20)), color = "red") +
labs(title = "Simple Moving Average (SMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "red"), labels = c("Price", "SMA")) +
theme_minimal()
# Exponential Moving Average (EMA)
ema_20 <- EMA(aapl_prices, n = 20)
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(ema_20), y = as.numeric(ema_20)), color = "blue") +
labs(title = "Exponential Moving Average (EMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "blue"), labels = c("Price", "EMA")) +
theme_minimal()
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(wma_custom), y = as.numeric(wma_custom)), color = "green") +
labs(title = "Weighted Moving Average (WMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "green"), labels = c("Price", "WMA")) +
theme_minimal()
# Savitzky-Golay Filter
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
# Plot Savitzky-Golay Filter
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(sg_filter)), color = "purple") +
labs(title = "Savitzky-Golay Filter",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "purple"), labels = c("Price", "SG Filter")) +
theme_minimal()
# Lowess Smoothing
lowess_smooth <- lowess(aapl_prices)
# Plot Lowess Smoothing
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(lowess_smooth$y)), color = "orange") +
labs(title = "Lowess Smoothing",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "orange"), labels = c("Price", "Lowess")) +
theme_minimal()
model <- dlmModPoly(order = 2, dV = exp(0.5), dW = exp(-1))
# Kalman Filter
model <- dlmModPoly(order = 2)
model$V <- diag(exp(0.5),2)
model$W <- exp(-1)
kalman_filter <- dlmSmooth(model, as.numeric(aapl_prices))
# Load necessary package
library(stats)
# Set initial state vector and covariance matrix
x0 <- c(1, 2) # Initial state vector
P0 <- matrix(c(10, 0, 0, 10), nrow = 2) # Covariance matrix
# Define measurement function (optional)
Fx <- function(x, z) { return(x + rnorm(length(x))) } # Example: adding a noise term to the state vector
# Set input data and measurements as matrices or vectors
inputs <- matrix(c(1, 0), nrow = length(aapl_prices), byrow = TRUE) # Assuming you have a time series of length 'n' for inputs
measurements <- ts(data, frequency = 1)$values # Assuming 'data' is your time series data
measurements <- ts(aapl_prices, frequency = 1)$values # Assuming 'data' is your time series data
kalman_filter <- dlmSmooth(model, as.numeric(aapl_prices$AAPL.Adjusted))
measurements <- ts(aapl_prices$AAPL.Close, frequency = 1)$values # Assuming 'data' is your time series data
measurements <- ts(aapl_prices$AAPL.Close, frequency = 1) # Assuming 'data' is your time series data
# Apply the Kalman filter
kalman_filter_output <- kalmanFilter(x0, P0, Fx, measurements, inputs)
# Load necessary package
library(stats)
# Apply the Kalman filter
kalman_filter_output <- kalmanFilter(x0, P0, Fx, measurements, inputs)
kalman_filter <- dlmSmooth(aapl_close,model)
Nile
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
plot(aapl_prices, type ='o')
lines(dropFirst(s$s), col = "red")
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(s$s[, 1]))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 1500, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15, dW = 140))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(2, dV = 15, dW = 140))
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15000, dW = 140000))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter with adjusted dV and dW values
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 1e-6, dW = 1e-4))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter with adjusted dV and dW values
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 1e-68, dW = 1e-4))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
ggplot(data_df, aes(x = Date)) +
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
library(ggplot2)
# Lowess Smoothing
lowess_smooth <- lowess(aapl_prices)
# Plot Lowess Smoothing
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(lowess_smooth$y)), color = "orange") +
labs(title = "Lowess Smoothing",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "orange"), labels = c("Price", "Lowess")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
library(ggplot2)
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date))
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close")
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s))
# Plot the results using ggplot
data_df |>
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
install.packages("PortfolioAnalytics")
install.packages("tidyquant")
install.packages("janitor")
remotes::install_github("quinfer/tsfe")
install.packages("caret")
install.packages("lme4")
install.packages("plm")
