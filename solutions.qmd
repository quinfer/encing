---
title: "Chapter solutions"
author: "Barry Quinn"
editor: visual
---

## Chapter 1: Statistics and Probability Primer

1.  Calculating Stock Returns:
    **Objective:** To calculate the annualized return of a stock over a three-year period.
    **Solution:**
    ```{R}
    # Initial and final prices of the stock
    initial_price <- 100
    final_price <- 150
    
    # Investment period in years
    years <- 3
    
    # Calculating the annualized return
    annualized_return <- (final_price / initial_price)^(1/years) - 1
    
    # Output the annualized return
    print(annualized_return)
    ```
    **Explanation:** The annualized return is calculated by finding the geometric average of the yearly return. It accounts for compounding over the period.

2.  Descriptive Statistics of Financial Data:
    **Objective:** To summarize and interpret a dataset of stock prices.
    **Solution:**
    ```{R}
    # Dataset of stock prices
    stock_prices <- c(120, 125, 130, 128, 135)
    
    # Summary statistics
    summary_stats <- summary(stock_prices)
    
    # Output the summary statistics
    print(summary_stats)
    ```
    **Explanation:** `summary()` function in R provides a quick statistical summary of the data, including measures like minimum, first quartile, median, mean, third quartile, and maximum.

3.  Basic Risk Assessment:
    **Objective:** To calculate and interpret the standard deviation of stock returns as a measure of risk.
    **Solution:**
    ```{R}
    # Returns of a stock
    stock_returns <- c(0.05, 0.02, -0.03, 0.04, 0.01)
    
    # Calculating standard deviation
    risk_measure <- sd(stock_returns)
    
    # Output the standard deviation
    print(risk_measure)
    ```
    **Explanation:** The standard deviation provides a measure of the dispersion of returns. A higher standard deviation implies greater risk (volatility) in the stock's returns.

4.  Simple Probability Calculation:
    **Objective:** To calculate the probability of an event in a financial context, exemplified by a coin toss.
    **Solution:**
    ```{R}
    # Probability of getting heads in a fair coin toss
    probability_heads <- 1 / 2
    
    # Output the probability
    print(probability_heads)
    ```
    **Explanation:** This is a basic example of classical probability, where each outcome (heads or tails) is equally likely.

5.  Basic Time Series Forecasting:
    **Objective:** To use a simple moving average for forecasting the next data point in a financial time series.
    **Solution:**
    ```{R}
    # Historical stock prices
    stock_prices <- c(120, 122, 121, 123, 125)
    
    # Forecast using a simple moving average of the last 3 prices
    forecast_price <- mean(tail(stock_prices, n=3))
    
    # Output the forecasted price
    print(forecast_price)
    ```
    **Explanation:** This method forecasts the next data point by calculating the average of a specified number of the most recent data points (here, the last three prices).

6.  Advanced Risk Modeling (VaR):
    **Objective:** To calculate and interpret the Value at Risk (VaR) for a portfolio.
    **Solution:**
    ```{R}
    # Historical returns of a portfolio
    portfolio_returns <- c(-0.05, 0.1, 0.03, -0.02, 0.04)
    
    # Confidence level (e.g., 95%)
    alpha <- 0.05
    
    # Calculating VaR
    VaR <- quantile(portfolio_returns, alpha)
    
    # Output the VaR
    print(VaR)
    ```
    **Explanation:** VaR measures the maximum expected loss over a given period under normal market conditions at a specified confidence level (here, 95%).

7.  Bayesian Update in Stock Forecasting:
    **Objective:** To perform a Bayesian update for a stock price prediction.
    **Solution:**
    ```{R}
    # Uniform prior distribution
    prior <- dbeta(1, 2, 1)
    
    # Binomial likelihood based on new evidence (e.g., 6 increases in 10 periods)
    likelihood <- dbinom(6, size=10, prob=0.5)
    
    # Calculating the posterior distribution
    posterior <- prior * likelihood
    
    # Output the posterior probability
    print(posterior)
    ```
    **Explanation:** Bayesian update combines prior belief (uniform distribution in this case) with new evidence (likelihood) to revise the belief about a stock's price movement.

8.  Hypothesis Testing in Financial Returns:
    **Objective:** To conduct and interpret a hypothesis test comparing a new investment strategy to market returns.
    **Solution:**
    ```{R}
    # Returns from a new investment strategy
    strategy_returns <- c(0.07, 0.08, 0.09, 0.06, 0.1)
    
    # Market average returns for comparison
    market_returns <- c(0.05, 0.05, 0.05, 0.05, 0.05)
    
    # Performing a t-test
    t_test_result <- t.test(strategy_returns, market_returns)
    
    # Output the t-test results
    print(t_test_result)
    ```
    **Explanation:** The t-test assesses whether the mean returns of the new strategy are significantly different from the market average. The p-value indicates the probability of observing such a difference if there were no real difference.

9.  Complex Time Series Analysis:
    **Objective:** To fit an ARIMA model to a financial time series and forecast future values.
    **Solution:**
    ```{R}
    # Assuming stock_prices is a time series object
    # Install and load the forecast package
    library(forecast)
    
    # Fitting an ARIMA model
    arima_model <- auto.arima(stock_prices)
    
    # Forecasting the next value
    forecast_result <- forecast(arima_model, h=1)
    
    # Output the forecast
    print(forecast_result)
    ```
    **Explanation:** `auto.arima()` function automatically selects the best ARIMA model for the time series data. The `forecast()` function then uses this model to predict future values (here, the forecast horizon is 1).

10. Portfolio Optimization:
The Markowitz model involves optimizing a portfolio by finding the best combination of assets that minimizes risk (variance) for a given expected return, or maximizes return for a given level of risk. This is achieved by adjusting the weights of each asset in the portfolio.
**Solution:**
```{R}
# Load the quadprog library for quadratic programming
library(quadprog)

# Generate a sequence of 10 dates, one day apart
N = 10
start_date <- as.Date("2023-01-01")
dates <- seq.Date(from = start_date, by = "day", length.out = N)

# Define the historical returns for four assets
historical_returns <- data.frame("Asset1"=rnorm(N, mean = 0.04),                                  
                                 "Asset2"=rnorm(N, mean = 0.03),                                 
                                 "Asset3"=rnorm(N, mean = 0.09),                                 
                                 "Asset4"=rnorm(N, mean = 0.01))
rownames(historical_returns) <- dates

# Calculate the covariance matrix of returns
Dmat <- cov(historical_returns)

# Define dvec as zero for minimum variance portfolio
dvec <- rep(0, ncol(historical_returns))

# Define the constraints (sum of weights = 1)
# Amat needs to have as many rows as there are assets plus one for the sum constraint
Amat <- cbind(1, diag(ncol(historical_returns)))
bvec <- c(1, rep(0, ncol(historical_returns)))

# Specify and solve the optimization problem
sol <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1)

# Extract the optimal weights
optimal_weights <- sol$solution

# Print the optimal weights
print(optimal_weights)
```
**Interpretation**

1.  **Setting Up the Data**:    
    -   The code first sets up a simulated historical return data for four assets over ten days. This is necessary as the Markowitz model requires historical return data to calculate asset weights.

2.  **Covariance Matrix**:    
    -   `Dmat` is calculated as the covariance matrix of the asset returns. It represents the risk relationships between each pair of assets, crucial in determining how asset prices move relative to each other.

3.  **Defining Optimization Parameters**:    
    -   The vector `dvec` is set to zero since the goal is to minimize variance without targeting a specific return.    
    -   `Amat` combines an equality constraint (that the sum of the asset weights equals 1) with non-negativity constraints (each asset weight must be zero or positive).

4.  **Quadratic Programming Problem**:    
    -   The `solve.QP` function is used to solve the quadratic programming problem. It aims to find the asset weights that minimize the overall portfolio variance subject to the given constraints.

5.  **Optimal Weights**:    
    -   The solution `sol$solution` provides the optimal weights for each asset. These weights represent how much of the portfolio should be allocated to each asset to achieve minimum risk.

6.  **Result**:    
    -   The output is a set of portfolio weights that minimize the portfolio's variance (risk), considering the historical return covariance of the assets and the constraints (total weight equals 1, non-negative weights). This represents the most risk-efficient allocation of assets in the portfolio under the given conditions.

::: callout-important
These solutions provide a mix of conceptual explanations and practical R code, offering a comprehensive understanding of each question's objective and methodology.
:::

## Chapter 2: Toolkit

**Theoretical Questions Solutions:**
*Easier:*

1.  **R's Role in Financial Analysis:**    
    -   Solution: R offers extensive packages for statistical analysis and data handling, making it ideal for analyzing complex financial data. Its powerful graphical capabilities enable clear visualization of financial trends and patterns.

2.  **Advantages of Cloud Computing in Finance:**    
    -   Solution: Cloud platforms like Posit Cloud provide scalability, easy access to advanced analytics tools, and collaborative features, essential for handling large datasets and complex financial models.

3.  **Data Visualization Importance:**    
    -   Solution: Data visualization is key in financial analysis for interpreting complex data sets and communicating findings effectively. `ggplot2` offers a versatile, layer-based plotting system, making complex visualizations more intuitive.

4.  **Version Control with Git:**    
    -   Solution: Version control is crucial for managing changes in code, especially in collaborative projects. Git allows tracking of changes, reverting to previous versions, and effective team collaboration.

5.  **Growth Mindset in Data Science:**    
    -   Solution: A growth mindset encourages continual learning and adaptability, crucial in a field like financial data analytics, where technologies and market conditions are constantly evolving.

*Advanced:*

6.  **Statistical vs. Machine Learning Approaches:**    
    -   Solution: Statistical modeling typically involves hypothesis-driven models, while machine learning focuses on prediction using data-driven models. Both approaches are valuable in financial data analysis, each with strengths in different scenarios.

7.  **Reproducibility Challenges:**    
    -   Solution: Challenges include data accessibility, software environment consistency, and clear documentation. Solutions involve using version control, containerization tools, and comprehensive documentation of analysis steps.

8.  **Collaborative Coding with Git and GitHub:**    
    -   Solution: Git and GitHub facilitate version control, issue tracking, and code review, supporting a collaborative workflow. This ensures code integrity and effective team collaboration in financial analysis projects.

9.  **Tidyverse Ecosystem:**    
    -   Solution: The Tidyverse provides a consistent and user-friendly syntax for data import, cleaning, manipulation, and visualization, streamlining the data analysis process and enhancing productivity in financial data analytics.

10. **Modular Coding for Financial Analysis:**    
    -   Solution: Modular coding in R improves code readability, reusability, and testing. In financial analysis, where models can be complex, this approach enables easier maintenance and collaboration.

**Practical Questions Solutions:**
*Easier:*

1.  **Basic R Data Manipulation:**
    ```{r}
    #| eval: false
    data <- data %>% mutate(percent_change = (stock_price - lag(stock_price)) / lag(stock_price) * 100)
    ```
    Interpretation: Percentage change helps identify trends in stock prices, indicating potential growth or decline.

2.  **Creating Plots in R:**
    ```{r}     
    #| eval: false
    ggplot(data, aes(x = date, y = stock_price)) + geom_line()
    ```
    `Interpretation: Line charts provide a clear view of stock price trends over time, aiding in investment decisions.

3.  **Git Basics:**
    Commands: `git init`, `git add .`, `git commit -m "Initial commit"`
    Benefits: Ensures code versioning, allows tracking of changes, and facilitates team collaboration.

4.  **Data Cleaning in R:**
    ```{r}
    #| eval: false    
    data <- data %>% mutate(stock_price = ifelse(is.na(stock_price), mean(stock_price, na.rm = TRUE), stock_price))
    ```
    Implications: Handling missing data prevents biases and errors in financial analysis.

5.  **Basic Linear Regression in R:**
    ```{r}
    #| eval: false  
    model <- lm(stock_price ~ stock_id, data = data)
    summary(model)
    ```
    Interpretation: The model provides insights into how stock prices are related to their IDs, which could correlate with other financial factors.

*Advanced:*

6.  **Advanced Financial Modeling:**
    ```{r}
    #| eval: false
    model <- auto.arima(stock_data$stock_price)
    forecast(model)
    ```
    Assumptions: Assumes stock prices follow an ARIMA process. Limitations include potential overfitting and sensitivity to data anomalies.

7.  **Machine Learning Application:**
    ```{r}
    #| eval: false
    model <- train(stock_price ~ ., data = stock_data, method = "rf")
    ```
    Choice and Effectiveness: Random Forest is chosen for its ability to handle non-linear relationships in data, useful in complex financial markets.

8.  **Reproducible Analysis with Quarto:**
    Use Quarto to create a document that combines R code for financial analysis, outputs, and narrative.
    Importance: Ensures that financial analyses can be reliably reproduced and verified.

9.  **Tidyverse for Complex Data Manipulation:**
    ``` {r}
    #| eval: false
    stock_data %>% group_by(stock_id) %>% summarize(average_price = mean(stock_price))
    ```
    Benefit: This manipulation provides insights into the average performance of each stock, crucial for portfolio analysis.

10. **Collaborative Financial Project using GitHub:**
    Workflow: Clone a repository, create branches for features, use pull requests for merging.
    Benefits: Enhances collaboration, ensures code review, and maintains project organization.

These solutions offer a comprehensive understanding of both the theoretical concepts and practical applications in financial data analytics using R and related tools.

## Chapter 4: Time series models

Here are the R coded solutions with detailed explanations for each exercise:

Exercise 1:
```{R}
# Install and load necessary packages
library(tidyquant)

# Download historical stock prices for Apple Inc. (AAPL)
aapl_data <- tq_get("AAPL", from = "2018-01-01", to = "2023-12-31")

# Extract the closing prices and calculate daily returns
closing_prices <- aapl_data$close
daily_returns <- (closing_prices - lag(closing_prices)) / lag(closing_prices)

# Plot the closing prices over time
plot(closing_prices, main = "Apple Inc. (AAPL) Closing Prices",
     xlab = "Time", ylab = "Price", col = "blue")

# Plot the daily returns over time     
plot(daily_returns, main = "Apple Inc. (AAPL) Daily Returns",
     xlab = "Time", ylab = "Return", col = "red")
```

Explanation:
- The `tidyquant` package is used to download historical stock price data from Yahoo Finance.
Certainly! Here's the complete explanation for Exercise 1:

Explanation:
- The `tidyquant` package is used to download historical stock price data from Yahoo Finance.
- `tq_get()` retrieves the data for the specified ticker symbol (AAPL) and date range.
- The closing prices are extracted from the downloaded data using `aapl_data$close`.
- Daily returns are calculated based on the closing prices using the formula `(closing_prices - lag(closing_prices)) / lag(closing_prices)`.
- The closing prices and daily returns are plotted using the `plot()` function.
- The plots help identify trends, seasonality, or unusual patterns in the price and return series.

Exercise 2:
```{R}
library(signal)

# Apply smoothing techniques
sma_20 <- SMA(closing_prices, n = 20)
ema_0.1 <- EMA(closing_prices, n = 20, wilder = FALSE, ratio = 0.1)
sg_filtered <- sgolayfilt(closing_prices, p = 3, n = 21)
lowess_smoothed <- lowess(closing_prices)

# Plot the original price series and smoothed series
plot(closing_prices, main = "Apple Inc. (AAPL) Closing Prices with Smoothing",
     xlab = "Time", ylab = "Price", col = "black")
lines(sma_20, col = "blue")
lines(ema_0.1, col = "red")
lines(sg_filtered, col = "green")
lines(lowess_smoothed$y, col = "purple")
legend("topleft", legend = c("Original", "SMA (20)", "EMA (0.1)", "Savitzky-Golay", "Lowess"),
       col = c("black", "blue", "red", "green", "purple"), lty = 1)
```

Explanation:
- The `SMA()` function calculates the Simple Moving Average with a window size of 20 days.
- The `EMA()` function calculates the Exponential Moving Average with a smoothing factor of 0.1.
- The `sgolayfilt()` function applies the Savitzky-Golay filter with a polynomial order of 3 and a window size of 21.
- The `lowess()` function applies Lowess smoothing with default parameters.
- The original price series and smoothed series are plotted on the same graph using `plot()` and `lines()` functions.
- The differences between the smoothing methods and their effectiveness in capturing the underlying trend can be observed from the plot.

Exercise 3:
```{R}
library(tseries)
library(tidyverse)

# Test for stationarity using the ADF test
adf_test <- adf.test(closing_prices)
print(adf_test)

# If non-stationary, apply differencing
if (adf_test$p.value > 0.05) {
  differenced_prices <- diff(closing_prices)
  # remove NAs from differenced series
  differenced_prices <- na.omit(differenced_prices)
  adf_test_diff <- adf.test(differenced_prices)
  print(adf_test_diff)
}
```

Explanation:
- The `adf.test()` function performs the Augmented Dickey-Fuller (ADF) test to check for stationarity.
- If the p-value of the ADF test is greater than 0.05, the series is considered non-stationary.
- In case of non-stationarity, differencing is applied using the `diff()` function.
- The ADF test is performed again on the differenced series to confirm stationarity.

Exercise 4:
```{R}
# Fit an ARIMA model
arima_model <- auto.arima(closing_prices)
print(summary(arima_model))

# Forecast the next 30 days
forecast_30 <- forecast(arima_model, h = 30)
plot(forecast_30, main = "ARIMA Forecast for Apple Inc. (AAPL) Closing Prices",
     xlab = "Time", ylab = "Price")
```

Explanation:
- The `auto.arima()` function automatically selects the best ARIMA model parameters based on the AIC criterion.
- The `summary()` function provides a summary of the fitted ARIMA model, including the coefficients and their significance.
- The `forecast()` function is used to forecast the next 30 days of stock prices based on the fitted ARIMA model.
- The forecasted values are plotted along with the original price series using the `plot()` function.

Exercise 5:
```{R}
# Install and load necessary packages
library(rugarch)

# Specify the GARCH(1,1) model
spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0)),
                   variance.model = list(garchOrder = c(1, 1),
                                         model = "sGARCH",
                                        submodel = NULL),
                   distribution.model = "norm",
                   fixed.pars = list(mu = 0, omega = 0.1, alpha1 = 0.1, beta1 = 0.8))

# Simulate a GARCH(1,1) process
garch_sim <- ugarchpath(spec, n.sim = 1000, m.sim = 1)

# Fit a GARCH(1,1) model to the simulated data
garch_fit <- ugarchfit(spec, garch_sim@path$seriesSim)
print(garch_fit)

# Compare the estimated parameters with the true values
print(coef(garch_fit))
print(garch_sim@model$pars)
```

In the updated code, the model specification is defined using `ugarchspec()` with the following changes:
- The `fixed.pars` argument is used to specify the parameter values directly, ensuring that the names match the expected names.
- The `submodel` argument in the `variance.model` is set to `NULL` to use the default GARCH(1,1) parameterization.

By specifying the parameter values using `fixed.pars` with the correct names, the error should be resolved, and the code should run without issues.

Here's the explanation of the changes made:
- `mu`: Represents the mean of the GARCH process. It is set to 0 in this example.
- `omega`: Represents the constant term in the GARCH variance equation. It is set to 0.1 in this example.
- `alpha1`: Represents the coefficient of the squared residual term in the GARCH variance equation. It is set to 0.1 in this example.
- `beta1`: Represents the coefficient of the lagged variance term in the GARCH variance equation. It is set to 0.8 in this example.

By providing the parameter values directly using `fixed.pars`, you ensure that the parameter names match the expected names, and the `ugarchpath()` function should run without the parameter mismatch error.

Remember to adjust the parameter values according to your specific requirements and the characteristics of your GARCH process.

Exercise 6:
```{R}
# Download historical stock prices for two related companies
library(tidyquant)
aapl_data <- tq_get("AAPL", from = "2018-01-01", to = "2023-12-31")
msft_data <- tq_get("MSFT", from = "2018-01-01", to = "2023-12-31")

# Extract the closing prices
aapl_prices <- aapl_data$close
msft_prices <- msft_data$close

# Perform cointegration analysis
library(urca)
coint_test <- ca.jo(cbind(aapl_prices, msft_prices), type = "trace", K = 2, ecdet = "none", spec = "transitory")
summary(coint_test)

# Estimate a VECM if cointegration is found
if (coint_test@teststat[1] > coint_test@cval[1,2]) {
  vecm_model <- cajorls(coint_test, r = 1)
  print(summary(vecm_model$rlm))
}
```

Explanation:
- Historical stock prices for two related companies (AAPL and MSFT) are downloaded using `tq_get()` from the `tidyquant` package.
- The closing prices for both stocks are extracted using `aapl_data$close` and `msft_data$close`.
- The `urca` package is used for cointegration analysis.
- `ca.jo()` performs the Johansen cointegration test to determine if there is a long-run relationship between the two price series.
- If cointegration is found (i.e., the test statistic is greater than the critical value), a Vector Error Correction Model (VECM) is estimated using `cajorls()`.
- The summary of the VECM is printed for interpretation.

Exercise 7:
```{R}
# Conduct Granger causality test
library(lmtest)
grangertest(aapl_prices ~ msft_prices, order = 1)
grangertest(msft_prices ~ aapl_prices, order = 1)
```

Explanation:
- The `lmtest` package is used for conducting the Granger causality test.
- `grangertest()` performs the Granger causality test to determine if the price of one stock can be used to predict the price of the other stock.
- The test is conducted in both directions: AAPL prices predicting MSFT prices and vice versa.
- The test results provide insights into the lead-lag relationship between the two stocks and their implications for investment and risk management strategies.

Exercise 8:
```{R}
# Simulate a random walk process
set.seed(123)
n_steps <- length(closing_prices)
drift <- 0.001
volatility <- 0.02
initial_price <- 100

steps <- sample(c(-1, 1), size = n_steps, replace = TRUE)
steps[1] <- 0
returns <- drift + volatility * steps
sim_prices <- initial_price * exp(cumsum(returns))

# Plot the simulated price series
plot(sim_prices, type = "l", main = "Simulated Random Walk Process",
     xlab = "Time", ylab = "Price")

# Calculate daily returns
sim_returns <- diff(log(sim_prices))
```

```{R}
library(ggplot2)

# Compare with real stock price data
price_data <- data.frame(Time = 1:length(closing_prices[1:length(sim_prices)]),
                         Real = as.numeric(closing_prices[1:length(sim_prices)]),
                         Simulated = as.numeric(sim_prices))

ggplot(data = price_data, aes(x = Time)) +
  geom_line(aes(y = Real, color = "Real"), linewidth = 1) +
  geom_line(aes(y = Simulated, color = "Simulated"), linewidth = 1) +
  scale_color_manual(values = c("Real" = "blue", "Simulated" = "red")) +
  labs(title = "Comparison of Real and Simulated Price Series",
       x = "Time",
       y = "Price") +
  theme_minimal()

# Compare return distributions
return_data <- data.frame(Return = c(daily_returns, sim_returns),
                          Type = c(rep("Real", length(daily_returns)),
                                   rep("Simulated", length(sim_returns))))

ggplot(data = return_data, aes(x = Return, fill = Type)) +
  geom_histogram(aes(y = ..density..), alpha = 0.7, position = "identity", bins = 30) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(values = c("Real" = "blue", "Simulated" = "red")) +
  labs(title = "Comparison of Return Distributions",
       x = "Return",
       y = "Density") +
  facet_wrap(~ Type, ncol = 2) +
  theme_minimal()
```

Explanation:
1. Price Series Comparison:
   - We create a data frame `price_data` that contains the time index, real prices, and simulated prices.
   - Using `ggplot()`, we create a line plot with the time index on the x-axis and the price values on the y-axis.
   - We add two `geom_line()` layers to plot the real prices (in blue) and simulated prices (in red).
   - We set the colors manually using `scale_color_manual()` and provide appropriate labels using `labs()`.
   - Finally, we apply the `theme_minimal()` theme for a cleaner plot appearance.

2. Return Distributions Comparison:
   - We create a data frame `return_data` that combines the real returns and simulated returns, along with a type indicator.
   - Using `ggplot()`, we create a histogram plot with the return values on the x-axis and the density on the y-axis.
   - We use `geom_histogram()` to plot the histograms, with `..density..` mapping to show the density instead of count.
   - We set `alpha` to 0.7 for transparency and `position = "identity"` to overlay the histograms.
   - We add a `geom_density()` layer to display the density curves on top of the histograms.
   - We set the fill colors manually using `scale_fill_manual()`.
   - We use `facet_wrap()` to create separate panels for the real and simulated return distributions.
   - Finally, we apply the `theme_minimal()` theme for a cleaner plot appearance.

The resulting plots will show the comparison of the real and simulated price series over time, as well as the comparison of their return distributions side by side.

Explanation:
- A random walk process is simulated with specified drift and volatility parameters.
- The simulated price series is plotted using `plot()` with a line type.
- Daily returns are calculated from the simulated price series using `diff()` and `log()`.
- The simulated price series is compared with the real stock price data by plotting them together using `ggplot()` and `geom_line()`.
- The return distributions of the real and simulated data are compared using histograms and density plots with `ggplot()`, `geom_histogram()`, and `geom_density()`.
- The similarities and differences between the real and simulated series, as well as their implications for financial modeling and forecasting, can be discussed based on the visual comparison and return distributions.
